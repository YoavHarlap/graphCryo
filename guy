import logging
print("hii")
import pyfftw
import matplotlib.pyplot as plt
import numpy as np
import cupy as cp


CRYONUMIMAGES = 4
N_LABLED = 2
N_UNLABLED = 2
num_imgs = N_LABLED+N_UNLABLED 

from aspire.abinitio import CLSyncVoting
from aspire.basis import FFBBasis2D, FFBBasis3D
from aspire.classification import BFSReddyChatterjiAverager2D, RIRClass2D
from aspire.denoising import DenoiserCov2D
from aspire.noise import AnisotropicNoiseEstimator, CustomNoiseAdder
from aspire.operators import FunctionFilter, RadialCTFFilter
from aspire.reconstruction import MeanEstimator
from aspire.source import Simulation, RelionSource, ArrayImageSource
from aspire.source.simulation import randn
from aspire.basis.fspca import FSPCABasis
from aspire.storage import StarFile
from aspire.utils.coor_trans import (
    get_aligned_rotations,
    get_rots_mse,
    register_rotations,
)
from aspire.volume import Volume
import os
from aspire.source import RelionSource, Simulation

logger = logging.getLogger(__name__)


img_size = 189
#img_size = 28

writeable_dir = "/data/yoavharlap/saved_data"  # this is where data will be saved
print(num_imgs)


# %%
os.chdir(writeable_dir)
og_v = Volume.load("/scratch/guysharon/Work/datafiles/volrefs/emd_2660.map", dtype=np.float64)
logger.info("Original volume map data" f" shape: {og_v.shape} dtype:{og_v.dtype}")
v = og_v.downsample(img_size)
L = v.resolution
noise_variance = 0

def noise_function(x, y):
    alpha = 1
    beta = 1
    # White
    f1 = noise_variance
    # Violet-ish
    f2 = noise_variance * (x * x + y * y) / L * L
    return (alpha * f1 + beta * f2) / 2.0


# %%
custom_noise = CustomNoiseAdder(noise_filter=FunctionFilter(noise_function))

logger.info("Initialize CTF filters.")
# Create some CTF effects
pixel_size = 5 * 65 / img_size  # Pixel size of the images (in angstroms)
voltage = 200  # Voltage (in KV)
defocus_min = 1.5e4  # Minimum defocus value (in angstroms)
defocus_max = 2.5e4  # Maximum defocus value (in angstroms)
defocus_ct = 7  # Number of defocus groups.
Cs = 2.0  # Spherical aberration
alpha = 0.1  # Amplitude contrast

# Create filters
ctf_filters = [
    RadialCTFFilter(pixel_size, voltage, Cs=2.0, alpha=0.1)
                 ]                                                                              
# Finally create the Simulation

src = Simulation(
L=v.resolution,
    n=num_imgs,
    vols=v,
    noise_adder=custom_noise,
    unique_filters=ctf_filters,
    dtype=v.dtype,
    offsets = img_size / 16 * randn(2, num_imgs).astype(float).T / 50
)

#%% add pixel size to metadata
src._metadata.insert(0,'_rlnPixelSize', pixel_size)

#%% create starfile and mrcs

tmp = src.save("/home/yoavharlap/work/starfile.star", overwrite=True, batch_size=150000)
starfile_fullpath = tmp['starfile']
mrcs_fullpath = os.path.join(os.path.dirname(tmp['starfile']),tmp['mrcs'][0])
import mrcfile
mrcs = mrcfile.open(mrcs_fullpath,'r+')
imgs = np.array(mrcs.data)

imgs[0] = np.ones((189,189))

mrcs.set_data(imgs)
mrcs.close()


#%% imports for signal enhancement
prev_pwd = os.getcwd()
os.chdir('/scratch/guysharon/Work/CryoEMSignalEnhancement')
from src.cryo_signal_enhance import *
os.chdir(prev_pwd)
import matplotlib.pyplot as plt
import pickle

#%% options for signal enhancement

opts = {
    #   GENERAL
        "N":                    2147483647,
        'verbose':              True,


    #   PREPROCESSING
        "downsample":           189,
        #"downsample":           28,
        "batch_size":           2**15,
        "num_coeffs":           1500,

    #   EM
        "ctf":                  True,
        "iter":                 7,
        "norm":                 True,
        "em_num_inputs":        150,
        "take_last_iter":       True,
        "em_par":               True,
        "em_gpu":               False,
        "num_class_avg":        1500,
        "num_class_avg":        1,

    #   DEBUG
        'debug_verbose':        True,
        'random_seed':          -1,
        'sample':               False,
    }

warnings.filterwarnings(action="ignore", message="unclosed", category=ResourceWarning)
warnings.filterwarnings("ignore") # I get an annoying socket warning
PrepareOpts(starfile_fullpath, writeable_dir, opts)
preprocessed_source = PreprocessData(starfile_fullpath,opts)




basis = FSPCA(preprocessed_source,opts)


#%% image clustering
opts["class_theta_step"]    = 5
opts["num_classes"]         = 3000
opts["num_classes"]         = 1
opts["class_size"]          = N_LABLED+N_UNLABLED
opts["class_gpu"]           = 0
opts["skip_class_sort"]     = False
opts['debug_verbose']       = False


opts['preprocess_flags'] = [1,1,0,0,0]

classes, classes_ref, chosen_classes, original_chosen_classes, corrs = Classify_2D(basis, opts)

preprocessed_source.images(0,4).show()  